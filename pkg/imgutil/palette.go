package imgutil

import (
	"image"
	"image/color"
	"log"
)

var (
	rottPaletteData = []byte{
		0x00, 0x00, 0x00, 0xfc, 0xfc, 0xfc, 0xc0, 0xb8, 0xa0, 0xb0, 0xa8, 0x84, 0xa0, 0x98, 0x6c, 0x94, 0x8c, 0x58, 0x88, 0x80, 0x54, 0x7c, 0x78, 0x50, 0x74, 0x6c, 0x4c, 0x68, 0x60, 0x48, 0x5c, 0x58, 0x44, 0x50, 0x4c, 0x3c, 0x48, 0x44, 0x38, 0x3c, 0x38, 0x28, 0x30, 0x2c, 0x1c, 0x24, 0x20, 0x14,
		0xf8, 0xf8, 0xf8, 0xe4, 0xe4, 0xe4, 0xd0, 0xd0, 0xd0, 0xc0, 0xc0, 0xc0, 0xb4, 0xb4, 0xb4, 0xa8, 0xa8, 0xa8, 0x98, 0x98, 0x98, 0x8c, 0x8c, 0x8c, 0x7c, 0x7c, 0x7c, 0x70, 0x70, 0x70, 0x64, 0x64, 0x64, 0x5c, 0x5c, 0x5c, 0x54, 0x54, 0x54, 0x48, 0x48, 0x48, 0x40, 0x40, 0x40, 0x38, 0x38, 0x38,
		0x2c, 0x2c, 0x2c, 0x24, 0x24, 0x24, 0x1c, 0x1c, 0x1c, 0x14, 0x14, 0x14, 0x0c, 0x0c, 0x0c, 0xfc, 0xf0, 0xf0, 0xf4, 0xd4, 0xd4, 0xf0, 0xb8, 0xb8, 0xec, 0xa0, 0xa0, 0xe8, 0x88, 0x88, 0xe4, 0x74, 0x74, 0xdc, 0x5c, 0x5c, 0xd8, 0x44, 0x44, 0xd4, 0x30, 0x30, 0xd0, 0x1c, 0x1c, 0xcc, 0x0c, 0x0c,
		0xc8, 0x00, 0x00, 0xbc, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x98, 0x00, 0x00, 0x88, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x70, 0x00, 0x00, 0x64, 0x00, 0x00, 0x58, 0x00, 0x00, 0x4c, 0x0c, 0x10, 0x40, 0x00, 0x00, 0x34, 0x00, 0x00, 0x28, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x14, 0x00, 0x00,
		0xfc, 0xfc, 0xec, 0xfc, 0xfc, 0xc8, 0xfc, 0xfc, 0xa8, 0xfc, 0xfc, 0x84, 0xfc, 0xfc, 0x64, 0xfc, 0xfc, 0x40, 0xfc, 0xfc, 0x20, 0xf4, 0xec, 0x00, 0xe0, 0xdc, 0x00, 0xd0, 0xc8, 0x00, 0xbc, 0xb8, 0x00, 0xac, 0xa8, 0x00, 0x98, 0x98, 0x00, 0x88, 0x84, 0x00, 0x74, 0x74, 0x00, 0x64, 0x64, 0x00,
		0x50, 0x50, 0x00, 0x40, 0x40, 0x00, 0x30, 0x30, 0x00, 0x1c, 0x1c, 0x00, 0x0c, 0x0c, 0x00, 0xdc, 0xfc, 0xdc, 0xa4, 0xe0, 0xa4, 0x74, 0xc4, 0x74, 0x4c, 0xac, 0x4c, 0x2c, 0x90, 0x2c, 0x14, 0x78, 0x14, 0x04, 0x60, 0x04, 0x00, 0x50, 0x00, 0x00, 0x40, 0x00, 0x00, 0x30, 0x00, 0x00, 0x20, 0x00,
		0x88, 0x98, 0x68, 0x7c, 0x88, 0x60, 0x70, 0x7c, 0x58, 0x64, 0x6c, 0x50, 0x58, 0x60, 0x48, 0x40, 0x50, 0x30, 0x30, 0x40, 0x20, 0x1c, 0x34, 0x10, 0x0c, 0x24, 0x04, 0x04, 0x14, 0x00, 0x00, 0x08, 0x00, 0xfc, 0x9c, 0x30, 0xec, 0x90, 0x30, 0xe0, 0x84, 0x30, 0xd4, 0x78, 0x34, 0xc8, 0x6c, 0x34,
		0xbc, 0x64, 0x34, 0xb0, 0x5c, 0x34, 0xa4, 0x50, 0x30, 0x98, 0x48, 0x30, 0x88, 0x40, 0x30, 0x7c, 0x3c, 0x2c, 0x70, 0x34, 0x28, 0x64, 0x2c, 0x28, 0x58, 0x28, 0x24, 0x4c, 0x20, 0x20, 0x40, 0x1c, 0x1c, 0xfc, 0xf8, 0xf4, 0xec, 0xe4, 0xe0, 0xe0, 0xd4, 0xcc, 0xd4, 0xc0, 0xbc, 0xc8, 0xac, 0xa8,
		0xbc, 0x98, 0x9c, 0xac, 0x88, 0x90, 0xa0, 0x7c, 0x84, 0x94, 0x6c, 0x7c, 0x88, 0x60, 0x74, 0x78, 0x50, 0x60, 0x6c, 0x44, 0x50, 0x5c, 0x3c, 0x40, 0x50, 0x30, 0x30, 0x40, 0x28, 0x24, 0x34, 0x20, 0x1c, 0x28, 0x18, 0x14, 0x18, 0x10, 0x0c, 0x0c, 0x08, 0x04, 0xd0, 0xd4, 0xe0, 0xc8, 0xcc, 0xd8,
		0xbc, 0xc0, 0xd0, 0xb4, 0xb8, 0xc8, 0xac, 0xb0, 0xc0, 0xa4, 0xa8, 0xb8, 0x9c, 0xa0, 0xb4, 0x90, 0x94, 0xac, 0x88, 0x8c, 0xa4, 0x80, 0x88, 0x9c, 0x78, 0x7c, 0x94, 0x70, 0x78, 0x8c, 0x68, 0x70, 0x84, 0x64, 0x68, 0x80, 0x54, 0x58, 0x78, 0x48, 0x4c, 0x70, 0x3c, 0x40, 0x68, 0x30, 0x38, 0x60,
		0x28, 0x2c, 0x58, 0x20, 0x24, 0x50, 0x18, 0x1c, 0x48, 0x10, 0x14, 0x40, 0x08, 0x0c, 0x38, 0x04, 0x08, 0x30, 0x04, 0x04, 0x28, 0x00, 0x00, 0x24, 0x00, 0x00, 0x1c, 0xf8, 0xdc, 0xd0, 0xec, 0xd0, 0xc8, 0xe4, 0xc4, 0xc0, 0xdc, 0xb8, 0xb8, 0xd4, 0xb0, 0xb0, 0xc8, 0xa0, 0xa0, 0xbc, 0x94, 0x94,
		0xb4, 0x8c, 0x8c, 0xa8, 0x80, 0x80, 0x9c, 0x74, 0x74, 0x94, 0x68, 0x68, 0x88, 0x60, 0x60, 0x7c, 0x54, 0x54, 0x74, 0x4c, 0x4c, 0x68, 0x40, 0x40, 0x5c, 0x38, 0x38, 0x54, 0x30, 0x30, 0x48, 0x28, 0x28, 0x3c, 0x20, 0x20, 0x34, 0x18, 0x18, 0x28, 0x14, 0x14, 0x1c, 0x0c, 0x0c, 0x14, 0x08, 0x08,
		0xb4, 0x50, 0x50, 0xa0, 0x38, 0x38, 0x8c, 0x28, 0x28, 0x78, 0x18, 0x18, 0x64, 0x0c, 0x0c, 0x50, 0x04, 0x04, 0x40, 0x00, 0x00, 0xfc, 0xf0, 0xd4, 0xf4, 0xe0, 0xc0, 0xec, 0xd0, 0xac, 0xe4, 0xc0, 0x9c, 0xdc, 0xb0, 0x8c, 0xd4, 0xa0, 0x7c, 0xcc, 0x94, 0x74, 0xc4, 0x8c, 0x6c, 0xc0, 0x84, 0x64,
		0xb8, 0x80, 0x60, 0xb4, 0x78, 0x58, 0xac, 0x74, 0x54, 0xa4, 0x6c, 0x50, 0xa0, 0x68, 0x48, 0x98, 0x60, 0x44, 0x94, 0x5c, 0x40, 0x8c, 0x58, 0x3c, 0x84, 0x50, 0x34, 0x80, 0x4c, 0x30, 0x78, 0x48, 0x2c, 0x74, 0x40, 0x28, 0x6c, 0x3c, 0x24, 0x64, 0x38, 0x20, 0x60, 0x34, 0x1c, 0x58, 0x30, 0x18,
		0x54, 0x2c, 0x18, 0x58, 0x28, 0x18, 0x50, 0x20, 0x14, 0x48, 0x1c, 0x10, 0x40, 0x18, 0x10, 0x38, 0x14, 0x0c, 0x30, 0x10, 0x08, 0x28, 0x0c, 0x08, 0x20, 0x0c, 0x04, 0x18, 0x08, 0x04, 0xfc, 0xfc, 0xfc, 0xfc, 0xf4, 0xdc, 0xfc, 0xec, 0xc0, 0xfc, 0xe4, 0xa4, 0xfc, 0xe0, 0x88, 0xfc, 0xe0, 0x80,
		0xfc, 0xe4, 0x78, 0xfc, 0xd0, 0x58, 0xfc, 0xb8, 0x38, 0xfc, 0xa0, 0x18, 0xfc, 0x80, 0x00, 0xe0, 0x6c, 0x0c, 0xc8, 0x60, 0x1c, 0xac, 0x54, 0x24, 0x94, 0x48, 0x2c, 0xfc, 0xfc, 0x98, 0xfc, 0xec, 0x00, 0xdc, 0xa4, 0x00, 0xbc, 0x6c, 0x00, 0x9c, 0x3c, 0x00, 0x7c, 0x1c, 0x00, 0x98, 0x00, 0x88,
	}
	quakePaletteData = []byte{
		0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x2f, 0x2f, 0x2f, 0x3f, 0x3f, 0x3f, 0x4b, 0x4b, 0x4b, 0x5b, 0x5b, 0x5b, 0x6b, 0x6b, 0x6b, 0x7b, 0x7b, 0x7b, 0x8b, 0x8b, 0x8b, 0x9b, 0x9b, 0x9b, 0xab, 0xab, 0xab, 0xbb, 0xbb, 0xbb, 0xcb, 0xcb, 0xcb, 0xdb, 0xdb, 0xdb, 0xeb, 0xeb, 0xeb,
		0x0f, 0x0b, 0x07, 0x17, 0x0f, 0x0b, 0x1f, 0x17, 0x0b, 0x27, 0x1b, 0x0f, 0x2f, 0x23, 0x13, 0x37, 0x2b, 0x17, 0x3f, 0x2f, 0x17, 0x4b, 0x37, 0x1b, 0x53, 0x3b, 0x1b, 0x5b, 0x43, 0x1f, 0x63, 0x4b, 0x1f, 0x6b, 0x53, 0x1f, 0x73, 0x57, 0x1f, 0x7b, 0x5f, 0x23, 0x83, 0x67, 0x23, 0x8f, 0x6f, 0x23,
		0x0b, 0x0b, 0x0f, 0x13, 0x13, 0x1b, 0x1b, 0x1b, 0x27, 0x27, 0x27, 0x33, 0x2f, 0x2f, 0x3f, 0x37, 0x37, 0x4b, 0x3f, 0x3f, 0x57, 0x47, 0x47, 0x67, 0x4f, 0x4f, 0x73, 0x5b, 0x5b, 0x7f, 0x63, 0x63, 0x8b, 0x6b, 0x6b, 0x97, 0x73, 0x73, 0xa3, 0x7b, 0x7b, 0xaf, 0x83, 0x83, 0xbb, 0x8b, 0x8b, 0xcb,
		0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x0b, 0x0b, 0x00, 0x13, 0x13, 0x00, 0x1b, 0x1b, 0x00, 0x23, 0x23, 0x00, 0x2b, 0x2b, 0x07, 0x2f, 0x2f, 0x07, 0x37, 0x37, 0x07, 0x3f, 0x3f, 0x07, 0x47, 0x47, 0x07, 0x4b, 0x4b, 0x0b, 0x53, 0x53, 0x0b, 0x5b, 0x5b, 0x0b, 0x63, 0x63, 0x0b, 0x6b, 0x6b, 0x0f,
		0x07, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x17, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x27, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x37, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x47, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x57, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x67, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x77, 0x00, 0x00, 0x7f, 0x00, 0x00,
		0x13, 0x13, 0x00, 0x1b, 0x1b, 0x00, 0x23, 0x23, 0x00, 0x2f, 0x2b, 0x00, 0x37, 0x2f, 0x00, 0x43, 0x37, 0x00, 0x4b, 0x3b, 0x07, 0x57, 0x43, 0x07, 0x5f, 0x47, 0x07, 0x6b, 0x4b, 0x0b, 0x77, 0x53, 0x0f, 0x83, 0x57, 0x13, 0x8b, 0x5b, 0x13, 0x97, 0x5f, 0x1b, 0xa3, 0x63, 0x1f, 0xaf, 0x67, 0x23,
		0x23, 0x13, 0x07, 0x2f, 0x17, 0x0b, 0x3b, 0x1f, 0x0f, 0x4b, 0x23, 0x13, 0x57, 0x2b, 0x17, 0x63, 0x2f, 0x1f, 0x73, 0x37, 0x23, 0x7f, 0x3b, 0x2b, 0x8f, 0x43, 0x33, 0x9f, 0x4f, 0x33, 0xaf, 0x63, 0x2f, 0xbf, 0x77, 0x2f, 0xcf, 0x8f, 0x2b, 0xdf, 0xab, 0x27, 0xef, 0xcb, 0x1f, 0xff, 0xf3, 0x1b,
		0x0b, 0x07, 0x00, 0x1b, 0x13, 0x00, 0x2b, 0x23, 0x0f, 0x37, 0x2b, 0x13, 0x47, 0x33, 0x1b, 0x53, 0x37, 0x23, 0x63, 0x3f, 0x2b, 0x6f, 0x47, 0x33, 0x7f, 0x53, 0x3f, 0x8b, 0x5f, 0x47, 0x9b, 0x6b, 0x53, 0xa7, 0x7b, 0x5f, 0xb7, 0x87, 0x6b, 0xc3, 0x93, 0x7b, 0xd3, 0xa3, 0x8b, 0xe3, 0xb3, 0x97,
		0xab, 0x8b, 0xa3, 0x9f, 0x7f, 0x97, 0x93, 0x73, 0x87, 0x8b, 0x67, 0x7b, 0x7f, 0x5b, 0x6f, 0x77, 0x53, 0x63, 0x6b, 0x4b, 0x57, 0x5f, 0x3f, 0x4b, 0x57, 0x37, 0x43, 0x4b, 0x2f, 0x37, 0x43, 0x27, 0x2f, 0x37, 0x1f, 0x23, 0x2b, 0x17, 0x1b, 0x23, 0x13, 0x13, 0x17, 0x0b, 0x0b, 0x0f, 0x07, 0x07,
		0xbb, 0x73, 0x9f, 0xaf, 0x6b, 0x8f, 0xa3, 0x5f, 0x83, 0x97, 0x57, 0x77, 0x8b, 0x4f, 0x6b, 0x7f, 0x4b, 0x5f, 0x73, 0x43, 0x53, 0x6b, 0x3b, 0x4b, 0x5f, 0x33, 0x3f, 0x53, 0x2b, 0x37, 0x47, 0x23, 0x2b, 0x3b, 0x1f, 0x23, 0x2f, 0x17, 0x1b, 0x23, 0x13, 0x13, 0x17, 0x0b, 0x0b, 0x0f, 0x07, 0x07,
		0xdb, 0xc3, 0xbb, 0xcb, 0xb3, 0xa7, 0xbf, 0xa3, 0x9b, 0xaf, 0x97, 0x8b, 0xa3, 0x87, 0x7b, 0x97, 0x7b, 0x6f, 0x87, 0x6f, 0x5f, 0x7b, 0x63, 0x53, 0x6b, 0x57, 0x47, 0x5f, 0x4b, 0x3b, 0x53, 0x3f, 0x33, 0x43, 0x33, 0x27, 0x37, 0x2b, 0x1f, 0x27, 0x1f, 0x17, 0x1b, 0x13, 0x0f, 0x0f, 0x0b, 0x07,
		0x6f, 0x83, 0x7b, 0x67, 0x7b, 0x6f, 0x5f, 0x73, 0x67, 0x57, 0x6b, 0x5f, 0x4f, 0x63, 0x57, 0x47, 0x5b, 0x4f, 0x3f, 0x53, 0x47, 0x37, 0x4b, 0x3f, 0x2f, 0x43, 0x37, 0x2b, 0x3b, 0x2f, 0x23, 0x33, 0x27, 0x1f, 0x2b, 0x1f, 0x17, 0x23, 0x17, 0x0f, 0x1b, 0x13, 0x0b, 0x13, 0x0b, 0x07, 0x0b, 0x07,
		0xff, 0xf3, 0x1b, 0xef, 0xdf, 0x17, 0xdb, 0xcb, 0x13, 0xcb, 0xb7, 0x0f, 0xbb, 0xa7, 0x0f, 0xab, 0x97, 0x0b, 0x9b, 0x83, 0x07, 0x8b, 0x73, 0x07, 0x7b, 0x63, 0x07, 0x6b, 0x53, 0x00, 0x5b, 0x47, 0x00, 0x4b, 0x37, 0x00, 0x3b, 0x2b, 0x00, 0x2b, 0x1f, 0x00, 0x1b, 0x0f, 0x00, 0x0b, 0x07, 0x00,
		0x00, 0x00, 0xff, 0x0b, 0x0b, 0xef, 0x13, 0x13, 0xdf, 0x1b, 0x1b, 0xcf, 0x23, 0x23, 0xbf, 0x2b, 0x2b, 0xaf, 0x2f, 0x2f, 0x9f, 0x2f, 0x2f, 0x8f, 0x2f, 0x2f, 0x7f, 0x2f, 0x2f, 0x6f, 0x2f, 0x2f, 0x5f, 0x2b, 0x2b, 0x4f, 0x23, 0x23, 0x3f, 0x1b, 0x1b, 0x2f, 0x13, 0x13, 0x1f, 0x0b, 0x0b, 0x0f,
		0x2b, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x4b, 0x07, 0x00, 0x5f, 0x07, 0x00, 0x6f, 0x0f, 0x00, 0x7f, 0x17, 0x07, 0x93, 0x1f, 0x07, 0xa3, 0x27, 0x0b, 0xb7, 0x33, 0x0f, 0xc3, 0x4b, 0x1b, 0xcf, 0x63, 0x2b, 0xdb, 0x7f, 0x3b, 0xe3, 0x97, 0x4f, 0xe7, 0xab, 0x5f, 0xef, 0xbf, 0x77, 0xf7, 0xd3, 0x8b,
		0xa7, 0x7b, 0x3b, 0xb7, 0x9b, 0x37, 0xc7, 0xc3, 0x37, 0xe7, 0xe3, 0x57, 0x7f, 0xbf, 0xff, 0xab, 0xe7, 0xff, 0xd7, 0xff, 0xff, 0x67, 0x00, 0x00, 0x8b, 0x00, 0x00, 0xb3, 0x00, 0x00, 0xd7, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xf3, 0x93, 0xff, 0xf7, 0xc7, 0xff, 0xff, 0xff, 0x9f, 0x5b, 0x53,
	}
	QuakePalette color.Palette
	RottPalette  color.Palette
)

func init() {
	RottPalette = BuildPalette(rottPaletteData)
	QuakePalette = BuildPalette(quakePaletteData)
}

// translates the pixels from a paletted image based on ROTT's
// palette over to the Quake palette
func TranslateRottPalettedImageToQuake(img *image.Paletted) {
	width := img.Bounds().Dx()
	height := img.Bounds().Dy()
	for i := 0; i < width; i++ {
		for j := 0; j < height; j++ {
			img.SetColorIndex(i, j, uint8(QuakePalette.Index(img.At(i, j))))
		}
	}
	img.Palette = QuakePalette
}

func BuildPalette(data []byte) color.Palette {
	if len(data) != 768 {
		log.Fatalf("len(data) != 768 (%d)", len(data))
	}
	var pal color.Palette
	for i := 0; i < len(data); i += 3 {
		pal = append(pal, color.RGBA{data[i], data[i+1], data[i+2], 0xff})
	}

	return pal
}

func GetPalette(gameName string) *color.Palette {
	var name2pal = map[string]color.Palette{
		"rott":  RottPalette,
		"quake": QuakePalette,
	}

	if pal, ok := name2pal[gameName]; ok {
		return &pal
	}
	return nil
}
